def knapsack_dp(W, wt, val, n):
    """A Dynamic Programming based solution for 0-1 Knapsack problem
    Returns the maximum value that can"""
    K = [[0 for x in range(W + 1)] for x in range(n + 1)]

    # Build table K[][] in bottom up manner
    for i in range(n + 1):
        for w in range(W + 1):
            if i == 0 or w == 0:
                K[i][w] = 0
            elif wt[i - 1] <= w:
                K[i][w] = max(val[i - 1] + K[i - 1][w - wt[i - 1]], K[i - 1][w])
            else:
                K[i][w] = K[i - 1][w]
    return K[n][W]


val = [60, 100, 120]
wt = [10, 20, 30]
W = 50

#val = [50,100,150,200] 
#wt = [8,16,32,40]
#W = 64
n = len(val)
print("Maximum possible profit =", knapsack_dp(W, wt, val, n))





Theory:

The 0/1 Knapsack problem is a classical optimization problem that can be solved using dynamic programming. In this problem, you are given a set of items, each with a weight (w[i]) and a value (v[i]), and a knapsack with a maximum weight capacity (W). The goal is to select items to maximize the total value while not exceeding the weight capacity of the knapsack. Unlike the Fractional Knapsack problem, in the 0/1 Knapsack problem, you can either take an item completely (0) or not at all (1).

Here's a step-by-step guide on how to solve the 0/1 Knapsack problem using dynamic programming:

1. Create a 2D table (array) of size (n + 1) x (W + 1), where n is the number of items and W is the maximum knapsack capacity. Initialize all the elements to zero.

2. Iterate through each item from 1 to n and for each possible knapsack capacity from 1 to W.

3. For each item i and knapsack capacity j, calculate the maximum value that can be obtained by either including or excluding the current item:

   - If the weight of the current item (w[i]) is greater than the current knapsack capacity (j), set the value in the table dp[i][j] to be equal to dp[i-1][j] (the maximum value without including the current item).

   - If the weight of the current item (w[i]) is less than or equal to the current knapsack capacity (j), you have two options:
     a. Exclude the current item: dp[i][j] = dp[i-1][j]
     b. Include the current item: dp[i][j] = v[i] + dp[i-1][j - w[i]]

   Take the maximum of these two options and store it in dp[i][j].

4. After completing the iterations for all items and knapsack capacities, the value in dp[n][W] will represent the maximum value that can be obtained.

5. To reconstruct the list of selected items, start from dp[n][W] and move backward through the table. If dp[i][j] is not equal to dp[i-1][j], it means the ith item was included. Add this item to the list of selected items and subtract its weight from j. Repeat this process until you reach the first row of the table.

Here's a Python code example for solving the 0/1 Knapsack problem using dynamic programming:

```python
def knapsack_01(values, weights, W):
    n = len(values)
    dp = [[0 for _ in range(W + 1)] for _ in range(n + 1)]

    for i in range(1, n + 1):
        for j in range(1, W + 1):
            if weights[i - 1] <= j:
                dp[i][j] = max(dp[i - 1][j], values[i - 1] + dp[i - 1][j - weights[i - 1]])
            else:
                dp[i][j] = dp[i - 1][j]

    max_value = dp[n][W]

    selected_items = []
    i, j = n, W
    while i > 0 and j > 0:
        if dp[i][j] != dp[i - 1][j]:
            selected_items.append(i - 1)
            j -= weights[i - 1]
        i -= 1

    return max_value, selected_items

# Example usage:
values = [60, 100, 120]
weights = [10, 20, 30]
max_weight = 50
max_value, selected_items = knapsack_01(values, weights, max_weight)
print("Maximum value:", max_value)
print("Selected items:", selected_items)
```

In this example, the `knapsack_01` function takes a list of values, a list of weights, and the maximum knapsack capacity as input and returns the maximum value and the list of selected items.